import asyncio
import aio_pika
import os
import json
from urllib.parse import unquote
from app.config.config import CONFIG
from app.models.rabbitData import RabbitData
from app.services.fileservice import DownloadAndWriteFile
from app.services.fileservice import WriteResultFile
from app.services.fileservice import extract_filename
from app.services.resUnet import unwrap_phase
from app.models.rabbitData import ProcessStatus
from app.services.rabbitmqProducer import send_message_to_queue

async def process_message(message: aio_pika.IncomingMessage):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    async with message.process():
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ UTF-8
        body = message.body.decode('utf-8')
        data = RabbitData.from_json(body)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –≤ –ø–æ–ª–µ DownloadLink
        decoded_link = unquote(data.DownloadLink)
        print(f"DecodedLink: {decoded_link}")
        # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Raw message body: {message.body}")
        print(f"Decoded DownloadLink: {decoded_link}")

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è: {data.Status} (–∑–Ω–∞—á–µ–Ω–∏–µ: {data.Status.value})")
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
        fileName = extract_filename(decoded_link)
        inputFilePath = await DownloadAndWriteFile(data.UserID, data.ProcessID, fileName, decoded_link)
        # –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é

        if data.ProcessMethod == 'neural':
            result = unwrap_phase(inputFilePath)
            if result['status'] == ProcessStatus.SUCCESS:
                newFileName = await WriteResultFile(data.UserID, data.ProcessID, fileName, result['content'])
                downloadLink = f'{CONFIG["FileShare"]["BaseURL"]}userID={data.UserID}&processID={data.ProcessID}&fileName={newFileName}'
                imageDownloadLink = f'{CONFIG["FileShare"]["BaseURL"]}userID={data.UserID}&processID={data.ProcessID}&fileName=Phase.png'
                rabbitData = RabbitData(
                UserID=data.UserID,
                ProcessID=data.ProcessID,
                Status=ProcessStatus.SUCCESS,
                ProcessMethod=data.ProcessMethod,
                DownloadLink=downloadLink,
                ImageDownloadLink=imageDownloadLink,
                ProcessingTime=result["processing_time"]
                )
                await send_message_to_queue(rabbitData)

            if result['status'] == ProcessStatus.FAILED:
                rabbitData = RabbitData(
                UserID=data.UserID,
                ProcessID=data.ProcessID,
                Status=ProcessStatus.FAILED,
                ProcessMethod=data.ProcessMethod,
                DownloadLink=None,
                ProcessingTime=None
                )
                await send_message_to_queue(rabbitData)




async def consume():
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    rabbit_config = CONFIG["RabbitMQ"]
    
    connection = await aio_pika.connect_robust(
        f"amqp://{rabbit_config['Username']}:{rabbit_config['Password']}@"
        f"{rabbit_config['Host']}:{rabbit_config['Port']}/{rabbit_config['VirtualHost']}"
    )

    async with connection:
        channel = await connection.channel()
        queue = await channel.declare_queue(rabbit_config["ReceiverQueue"], durable=True)


        async for message in queue:
            await process_message(message)
